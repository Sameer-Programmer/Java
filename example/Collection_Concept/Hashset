---To Represent Group of Elements ------
Conditions

1.-Insertion Order is Not preserved
1.Duplicates are Not allowed

we Have a concept called Hashcode -- by this concept we will be inserted elements into Hashset
Advantage
 Searching will be faster
 There is no concept of index in Hashset -- Elements are arranged in Random order
 Heterogenious will be Supported
 Nulls also supported
 ===============================================
 How many Ways We can Create Hashset Object
Declaration of Hashset
Hashset hashset = new Hashset();

By default it will allocate 16 Allocations ----intial size is 16

we have one more thing In Hashset ----------Loadfactor or we can call it has  Fill ratio
Fill ratio of Hashmap has Default value --- 0.75 -- called percentage

when ever storing Elements  will reach  to 75 percentage ,
New Object is Created in Hashset with new storage , the Old Object will reach to Garbage collection

we can configure intial size and Fill ratio -- if we want more and Justify
Hashset hs = new Hashset(100);      // Here am Providing initial size as 100;
Hashset hs = new  Hashset(100, 0.90); // Here am Providing initial size as 100 and Fill ratio as 0.90;
 The above is for Heterogenious data

 To store  elements for Homogenious Data
 Hashset <Integers> hashset  = new Hashset<Integers>();

 Special - Methods     No Special methods in Hashset
  Only the methods present in set interface only present in Hashset ---- But No special methods

add (value)
addAll(collection)
remove(value)
removeAll(collection)----------it will return true or false
contain(object) -----------------it will give output as True or False
containsAll( group of Objects)--
isEmpty() ------------------it will give output as True or False

 Note: Sorting and shuffling not directly Possible in Hashset  because Here Elements are in Random Order
 1.For sorting ----At First we have to convert this Hashset in to Array List -then we can sort by method Collection.sort

 Lets -- see -- How Hashset Method Works

 //Union ,Intersection (common Elements),difference

 union -------method Addall(collection)
 Intersection ---method retainall(collection)
 difference-----set1.removeall(set2)

// Hashet1 = [1,2,3,4,5]
// Hashset 2 = [3,4,5]
set1.addall(set2);
print set1--union;
Union: [1,2,3,4,5]     // duplicates will be not allowed



